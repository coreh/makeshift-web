:root {
    --surface-minus-2: #18181a;
    --surface-minus-1: #232326;
    --surface-0: #39393e;
    --surface-plus-1: #5c5c66;
    --surface-plus-2: #7c7c87;

    --surface-minus-2-contrast: #fff;
    --surface-minus-1-contrast: #fff;
    --surface-0-contrast: #fff;
    --surface-plus-1-contrast: #fff;
    --surface-plus-2-contrast: #000;

    --highlight: #799bbb;
    --highlight-contrast: #fff;

    --accent-error-danger: #cc3b40;
    --accent-warning: #f8a34e;
    --accent-success: #3bb273;
    --accent-light: #fcd34d;
    --accent-resource: #10b981;
    --accent-asset: #a156d6;
    --accent-code: #ea7c45;
    --accent-x: #ee3752;
    --accent-y: #6f9b1f;
    --accent-z: #2f84e3;

    --accent-error-danger-contrast: #fff;
    --accent-warning-contrast: #000;
    --accent-success-contrast: #000;
    --accent-light-contrast: #000;
    --accent-resource-contrast: #000;
    --accent-asset-contrast: #fff;
    --accent-code-contrast: #fff;
    --accent-x-contrast: #000b;
    --accent-y-contrast: #000b;
    --accent-z-contrast: #000b;

    --accent: var(--surface-plus-1);
    --contrast: var(--surface-plus-1-contrast);
    --text: var(--surface-plus-1-contrast);

    --control-radius: 0.3rem;
    --control-height: 2rem;
    --control-padding-x: 0.5rem;
    --control-gap: 0.5rem;
    --control-indent: 1rem;

    --shadow-low: 0 1px 0 rgba(0, 0, 0, 0.2);
    --shadow-medium: 0 2px 2px rgba(0, 0, 0, 0.2);
    --shadow-high: 0 4px 4px rgba(0, 0, 0, 0.4);

    font-size: 12px;
    color-scheme: dark;
}

* {
    box-sizing: border-box;
    min-width: 0; /* Makes flexbox more predictable */
    font-family: system-ui;
}

*::selection {
    background-color: var(--highlight);
    color: var(--highlight-contrast);
}

body {
    margin: 0;
    background: var(--surface-0);
    color: var(--surface-0-contrast);
}

main {
    display: flex;
    flex-direction: column;
    height: 100vh;
    padding: var(--control-gap);
}

textarea,
input[type="text"],
input[type="number"] {
    font: inherit;
    background: inherit;
    color: inherit;
    border: none;
    resize: none;
}

.Topic {
    display: contents;
}

.topic\:error-danger {
    --accent: var(--accent-error-danger);
    --contrast: var(--accent-error-danger-contrast);
}

.topic\:warning {
    --accent: var(--accent-warning);
    --contrast: var(--accent-warning-contrast);
}

.topic\:success {
    --accent: var(--accent-success);
    --contrast: var(--accent-success-contrast);
}

.topic\:light {
    --accent: var(--accent-light);
    --contrast: var(--accent-light-contrast);
}

.topic\:resource {
    --accent: var(--accent-resource);
    --contrast: var(--accent-resource-contrast);
}

.topic\:asset {
    --accent: var(--accent-asset);
    --contrast: var(--accent-asset-contrast);
}

.topic\:code {
    --accent: var(--accent-code);
    --contrast: var(--accent-code-contrast);
}

.topic\:x {
    --accent: var(--accent-x);
    --contrast: var(--accent-x-contrast);
}

.topic\:y {
    --accent: var(--accent-y);
    --contrast: var(--accent-y-contrast);
}

.topic\:z {
    --accent: var(--accent-z);
    --contrast: var(--accent-z-contrast);
}

.topic\:none {
    --accent: var(--surface-plus-1);
    --contrast: var(--surface-plus-1-contrast);
}

.Button {
    display: flex;
    /* flex-grow: 1; */
    /* flex-basis: 0; */
    align-items: center;
    justify-content: center;
    gap: var(--control-gap);
    appearance: none;
    font-size: inherit;
    border-radius: var(--control-radius);
    border: none;
    height: var(--control-height);
    padding-left: var(--control-padding-x);
    padding-right: var(--control-padding-x);
    box-shadow: var(--shadow-low);
    text-shadow: var(--shadow-low);
    background-color: var(--surface-0);
    color: var(--surface-0-contrast);

    &.primary {
        background-color: var(--accent);
        color: var(--contrast);
        font-weight: 500;
    }

    &:not(:disabled):hover {
        filter: brightness(1.1);
    }

    &:not(:disabled):active {
        filter: brightness(1.3);
    }

    &:disabled {
        background-color: color-mix(in srgb, var(--surface-0) 60%, transparent);
        color: color-mix(in srgb, var(--surface-0-contrast) 60%, transparent);

        &:disabled {
            background-color: color-mix(
                in srgb,
                var(--accent) 10%,
                transparent
            );
            color: color-mix(in srgb, var(--contrast) 60%, transparent);
        }
    }

    &:focus {
        outline: 2px solid color-mix(in srgb, var(--highlight) 80%, transparent);
        outline-offset: 1px;
    }
}

.VStack {
    display: flex;
    flex-direction: column;

    &.gap {
        gap: var(--control-gap);
    }
}

.HStack {
    display: flex;
    flex-direction: row;

    &.gap {
        gap: var(--control-gap);
    }
}

.ZStack {
    display: grid;

    & > * {
        grid-area: 1 / 1 / 1 / 1;
    }
}

.Status {
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text);
    height: var(--control-height);
    gap: var(--control-gap);

    &::before {
        content: "●";
        color: var(--accent);
    }
}

.TreeNode {
    .Chevron {
        appearance: none;
        background: transparent;
        border: none;
        color: inherit;
        position: absolute;
        left: 0;
        top: 50%;
        transform: translateY(-50%);
    }
    .Heading {
        display: flex;
        align-items: center;
        gap: var(--control-gap);
        justify-content: start;
        position: relative;
        height: var(--control-height);
        padding-left: calc(var(--control-indent) * 2);
        padding-right: var(--control-padding-x);

        &.state\:selected {
            background-color: color-mix(
                in srgb,
                var(--accent) 75%,
                transparent
            );
            outline: 1px solid var(--accent);
            color: var(--accent-contrast);
            text-shadow: var(--shadow-low);

            .EntityIcon,
            .Chevron {
                color: var(--accent-contrast);
                filter: drop-shadow(var(--shadow-low));
            }
        }
    }
    .Content {
        margin-left: var(--control-indent);
        border-left: 1px solid var(--surface-plus-1);
        transform-origin: top left;
    }
    .Content[data-state="open"] {
        animation: tree-slide-down 300ms cubic-bezier(0.87, 0, 0.13, 1);
    }
    .Content[data-state="closed"] {
        animation: tree-slide-up 300ms cubic-bezier(0.87, 0, 0.13, 1);
    }
}

@keyframes tree-slide-down {
    from {
        height: 0;
        opacity: 0;
        overflow: hidden;
    }
    to {
        height: var(--radix-collapsible-content-height);
    }
}

@keyframes tree-slide-up {
    from {
        height: var(--radix-collapsible-content-height);
    }
    to {
        overflow: hidden;
        opacity: 0;
        height: 0;
    }
}

@keyframes spin {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}

.EntityIcon,
.ComponentIcon {
    color: var(--accent);
    flex-shrink: 0;
}

svg.lucide {
    width: 1rem;
    height: 1rem;
    display: inline-flex;
}

.EntityTree {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    flex-basis: 0;
    overflow: auto;
}

.Panel {
    background-color: var(--surface-minus-1);
    color: var(--surface-minus-1-contrast);
    border-radius: var(--control-radius);
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    flex-basis: 0;
    overflow: auto;
    gap: var(--control-gap);
}

.Toolbar {
    background-color: var(--surface-minus-1);
    color: var(--surface-minus-1-contrast);
    border-radius: var(--control-radius);
    display: flex;
    flex-direction: row;
    height: calc(var(--control-height) * 2);
    padding-left: var(--control-indent);
    padding-right: var(--control-indent);
    align-items: center;
    justify-content: start;
    gap: var(--control-gap);
}

.Inspector {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    flex-basis: 0;
    overflow-y: auto;
    overflow-x: hidden;
}

.ComponentInspector {
    display: flex;
    flex-direction: column;
    border-bottom: 1px solid var(--surface-0);

    .Heading {
        font-size: 0.8rem;
        text-shadow: var(--shadow-low);
        display: flex;
        align-items: center;
        height: var(--control-height);
        padding-left: var(--control-padding-x);
        padding-right: var(--control-padding-x);
        gap: var(--control-gap);

        .EntityIcon,
        .Chevron {
            will-change: transform; /* fix for some flickering with the filter */
            filter: drop-shadow(var(--shadow-low));
        }
    }

    .Content {
        border-top: 1px solid var(--surface-minus-1);
        border-bottom: 1px solid var(--surface-minus-1);
        display: flex;
        flex-direction: column;
        gap: var(--control-gap);
        padding: var(--control-padding-x);
    }
}

.ComponentEditor {
    display: contents;

    textarea {
        background-color: var(--surface-minus-2);
        font-family: monospace;
        padding-left: var(--control-padding-x);
        padding-right: var(--control-padding-x);
        border-radius: var(--control-radius);
        height: calc(var(--control-height) * 4);
    }

    & > label {
        font-size: 0.8rem;
        display: flex;
        color: var(--accent);
        height: var(--control-height);
        align-items: center;
        padding-right: var(--control-padding-x);
    }
}

.TextInput {
    display: flex;
    height: var(--control-height);
    background-color: var(--surface-minus-2);
    padding-left: var(--control-padding-x);
    padding-right: var(--control-padding-x);
    border-radius: var(--control-radius);
    flex-grow: 1;
    gap: var(--control-gap);

    label {
        display: flex;
        font-size: 0.8rem;
        color: var(--accent);
        align-items: center;
        padding-left: var(--control-padding-x);
        flex-grow: 0;
        flex-basis: content;
        max-width: 50%;
        text-transform: capitalize;
        white-space: nowrap;
        z-index: 1;
    }

    &:focus-within {
        outline: 2px solid color-mix(in srgb, var(--highlight) 80%, transparent);
        outline-offset: 1px;
    }

    input {
        display: flex;
        text-align: end;
        flex-grow: 1;
        padding: 0;

        &:focus {
            outline: none;
        }
    }
}

.Trackball {
    display: flex;
    flex-grow: 0;
    flex-shrink: 0;
    height: calc(var(--control-height) * 4 + var(--control-gap) * 3);
    width: calc(var(--control-height) * 4 + var(--control-gap) * 3);
    border-radius: 100%;

    .Ring {
        display: flex;
        background: var(--surface-minus-2);
        padding: calc(var(--control-gap) * 1.5);
        border-radius: 100%;
        width: 100%;
        height: 100%;
        transition: border 0.2s ease-in-out;
        cursor:
            url("../cursors/rotate.svg") 12 12,
            auto;
        box-shadow: var(--shadow-high) inset;

        &:focus {
            outline: 2px solid
                color-mix(in srgb, var(--highlight) 80%, transparent);
        }
    }

    .Ball {
        overflow: hidden;
        display: flex;
        border-radius: 100%;
        width: 100%;
        border: 1px solid var(--surface-minus-2);
        height: 100%;
        background: radial-gradient(
                circle at center center,
                transparent,
                transparent,
                transparent,
                var(--surface-plus-2)
            ),
            radial-gradient(
                circle at center 30%,
                var(--surface-0),
                var(--surface-minus-1),
                var(--surface-minus-2),
                var(--surface-minus-2),
                var(--surface-0)
            );
        transition: filter 0.5s ease-in-out;
        cursor:
            url("../cursors/rotate-3d.svg") 12 12,
            auto;

        box-shadow: var(--shadow-medium);

        &:focus {
            outline: 2px solid
                color-mix(in srgb, var(--highlight) 80%, transparent);
        }
    }

    .Gymbal {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        height: 100%;

        .Axis {
            display: flex;
            align-items: center;
            justify-content: center;
            position: absolute;
            width: 20%;
            height: 20%;
            border-radius: 100%;
        }

        .X {
            background-color: var(--accent-x);
            color: var(--accent-x-contrast);
        }

        .Y {
            background-color: var(--accent-y);
            color: var(--accent-x-contrast);
        }

        .Z {
            background-color: var(--accent-z);
            color: var(--accent-x-contrast);
        }

        .MinusX {
            background: color-mix(in srgb, var(--accent-x) 50%, transparent);
            border: 2px solid var(--accent-x);
            color: transparent;
            &:hover {
                color: inherit;
            }
        }

        .MinusY {
            background: color-mix(in srgb, var(--accent-y) 50%, transparent);
            border: 2px solid var(--accent-y);
            color: transparent;
            &:hover {
                color: inherit;
            }
        }

        .MinusZ {
            background: color-mix(in srgb, var(--accent-z) 50%, transparent);
            border: 2px solid var(--accent-z);
            color: transparent;
            &:hover {
                color: inherit;
            }
        }
    }
}

/**
 * Adapted from ShadCN UI: https://ui.shadcn.com/docs/components/select
 * (MIT License)
 */

.SelectTrigger {
    display: flex;
    min-height: calc(var(--control-height));
    width: 100%;
    align-items: center;
    justify-content: stretch;
    white-space: nowrap;
    gap: var(--control-gap);

    border-radius: var(--control-radius);
    border: none;
    border-color: var(--border-input);
    background-color: var(--surface-minus-2);

    padding-left: 0.75rem;
    padding-right: 0.25rem;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;

    font-size: 0.875rem;

    color: var(--surface-minus-1-contrast);

    &:focus {
        outline: 2px solid color-mix(in srgb, var(--highlight) 80%, transparent);
        outline-offset: 1px;
    }

    &:disabled {
        cursor: not-allowed;
        opacity: 0.5;
    }

    & > span {
        display: flex;
        align-items: center;
        gap: var(--control-gap);
        flex-grow: 1;
    }

    label {
        display: flex;
        align-items: center;
        gap: var(--control-gap);
        flex-basis: 0;
        flex-grow: 0;
        color: var(--accent);
        min-width: fit-content;
        max-width: 50%;
    }
}

.ScrollButton {
    display: flex;
    cursor: default;
    align-items: center;
    justify-content: center;
    padding-top: 0.25rem;
    padding-bottom: 0.25rem;
    position: absolute;
    background: var(--surface-minus-1);

    &.Up {
        top: 0;
        left: 0;
        right: 0;
        height: var(--control-height);
    }

    &.Down {
        bottom: 0;
        left: 0;
        right: 0;
        height: var(--control-height);
    }
}

.SelectContent {
    position: relative;
    z-index: 50;
    max-height: 24rem;
    min-width: 8rem;
    overflow: hidden;
    border-radius: var(--control-radius);
    border: 1px solid var(--surface-0);
    background-color: var(--surface-minus-1);
    color: var(--text-popover-foreground);
    box-shadow: var(--shadow-high);
    &[data-state="open"] {
        animation: fadeIn 0.1s ease-out;
    }

    &:not([data-state="open"]) {
        animation: fadeOut 0.5s ease-out;
    }

    &[data-side="bottom"] {
        animation: slideInFromTop 0.1s ease-out;
    }

    &[data-side="left"] {
        animation: slideInFromRight 0.1s ease-out;
    }

    &[data-side="right"] {
        animation: slideInFromLeft 0.1s ease-out;
    }

    &[data-side="top"] {
        animation: slideInFromBottom 0.1s ease-out;
    }

    &.position\:popper {
        &[data-side="bottom"] {
            transform: translateY(0.25rem);
        }

        &[data-side="left"] {
            transform: translateX(-0.25rem);
        }

        &[data-side="right"] {
            transform: translateX(0.25rem);
        }

        &[data-side="top"] {
            transform: translateY(-0.25rem);
        }
    }
}

.SelectViewport {
    padding: 0.25rem;

    &.position\:popper {
        height: var(--radix-select-trigger-height);
        width: 100%;
        min-width: var(--radix-select-trigger-width);
    }
}

.SelectLabel {
    padding-left: 0.5rem;
    padding-right: 0.5rem;
    padding-top: 0.375rem;
    padding-bottom: 0.375rem;
    font-size: 0.875rem;
    font-weight: 600;
}

.SelectItem {
    position: relative;
    display: flex;
    width: 100%;
    cursor: default;
    user-select: none;
    align-items: center;

    & > * {
        display: flex;
        align-items: center;
        gap: var(--control-gap);
    }

    border-radius: 0.125rem;
    padding-top: 0.375rem;
    padding-bottom: 0.375rem;
    padding-left: 0.5rem;
    padding-right: 2rem;
    font-size: 0.875rem;
    outline: none;

    &:focus {
        background-color: var(--accent);
        color: var(--accent-contrast);
    }

    &[data-disabled] {
        pointer-events: none;
        opacity: 0.5;
    }
}

.SelectItemIndicator {
    position: absolute;
    right: 0.5rem;

    display: flex;
    align-items: center;
    justify-content: center;

    height: 0.875rem;
    width: 0.875rem;
}

.SelectItemIndicatorCheck {
    height: 1rem;
    width: 1rem;
}

.SelectSeparator {
    margin-left: -0.25rem;
    margin-right: -0.25rem;
    margin-top: 0.25rem;
    margin-bottom: 0.25rem;

    height: 1px;

    background-color: var(--surface-minus-1);
}

/* Animation keyframes */
@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

@keyframes fadeOut {
    from {
        opacity: 1;
    }
    to {
        opacity: 0;
    }
}

@keyframes zoomIn {
    from {
        transform: scale(0.95);
    }
    to {
        transform: scale(1);
    }
}

@keyframes zoomOut {
    from {
        transform: scale(1);
    }
    to {
        transform: scale(0.95);
    }
}

@keyframes slideInFromTop {
    from {
        opacity: 0;
        transform: translateY(-2rem);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes slideInFromRight {
    from {
        opacity: 0;
        transform: translateX(2rem);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

@keyframes slideInFromLeft {
    from {
        opacity: 0;
        transform: translateX(-2rem);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

@keyframes slideInFromBottom {
    from {
        opacity: 0;
        transform: translateY(2rem);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.Thumbnail {
    max-width: calc(var(--control-height) * 2.5);
    object-fit: contain;
    border-radius: var(--control-radius);
}

dl {
    display: flex;
    flex-direction: column;
    gap: calc(var(--control-gap) / 2);
    text-align: left;
    margin: 0;
}

dd {
    text-indent: 0;
    margin: 0;
    padding: 0;
    font-style: italic;
    opacity: 0.5;
    max-width: 25rem;
}

.SelectTrigger dd {
    display: none;
}

a {
    color: inherit;
}

.Checkbox {
    display: flex;
    appearance: none;
    padding: 0;
    border: none;
    background: none;
    height: var(--control-height);
    gap: var(--control-gap);
    align-items: center;
    padding-left: var(--control-indent);

    .CheckArea {
        display: flex;
        flex-grow: 0;
        flex-shrink: 0;
        align-items: center;
        justify-content: center;
        width: calc(var(--control-height));
        height: calc(var(--control-height));
        background-color: var(--surface-minus-2);
        border-radius: var(--control-radius);
        color: var(--surface-0-contrast);

        .Indicator {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 100%;
            height: 100%;
        }
    }

    &:focus {
        outline: none;

        .CheckArea {
            outline: 2px solid
                color-mix(in srgb, var(--highlight) 80%, transparent);
            outline-offset: 1px;
        }
    }

    label {
        display: flex;
        flex-basis: 0;
        flex-grow: 1;
        font-size: 0.8rem;
        justify-content: end;
        color: var(--surface-minus-2-contrast);
        text-align: right;
        text-transform: capitalize;
    }
}

.ColorWheel {
    display: flex;
    flex-shrink: 1;
    flex-grow: 1;
    align-items: center;
    justify-content: center;
    background-color: var(--surface-minus-2);
    border-radius: var(--control-radius);
    padding: var(--control-gap);

    .Wheel {
        cursor: crosshair;
        position: relative;
        width: 100%;
        min-width: 0;
        max-width: calc(var(--control-height) * 8);
        aspect-ratio: 1;
        border-radius: 100%;

        &:focus {
            outline: 2px solid
                color-mix(in srgb, var(--highlight) 80%, transparent);
            outline-offset: 1px;
        }
    }

    .HueGradient {
        padding: 6px;
        background: linear-gradient(
                var(--surface-minus-2),
                var(--surface-minus-2)
            ),
            conic-gradient(
                hsl(0, 100%, 50%) 0deg,
                hsl(60, 100%, 50%) 60deg,
                hsl(120, 100%, 50%) 120deg,
                hsl(180, 100%, 50%) 180deg,
                hsl(240, 100%, 50%) 240deg,
                hsl(300, 100%, 50%) 300deg,
                hsl(360, 100%, 50%) 360deg
            );
        background-clip: content-box, border-box;
        border-radius: 100%;
    }

    .Box {
        cursor: crosshair;
        position: relative;
        width: 63%;
        max-width: calc(var(--control-height) * 8 * 0.63);
        aspect-ratio: 1;
        display: grid;

        & > * {
            grid-area: 1 / 1 / 1 / 1;
        }

        &:focus {
            outline: 2px solid
                color-mix(in srgb, var(--highlight) 80%, transparent);
            outline-offset: 1px;
        }
    }

    .SaturationGradient {
        background: linear-gradient(
            to right,
            hsl(0, 0%, 50%),
            hsla(0, 0%, 50%, 0)
        );
    }

    .LightnessGradient {
        background: linear-gradient(
            to top,
            hsl(0, 0%, 0%),
            transparent,
            hsl(0, 0%, 100%)
        );

        .Handle {
            background-color: white;
        }
    }

    /**
     * Used to mask the artifacts from applying gamma correction to the
     * HSL gradient (rendered in sRGB) to get it to match the sRGB linear "look"
     */
    .Blur {
        background: none;
        -webkit-backdrop-filter: blur(4px);
        backdrop-filter: blur(4px);
    }

    .Handle {
        position: absolute;
        width: calc(var(--control-height) * 0.5);
        height: calc(var(--control-height) * 0.5);
        border: 1px solid var(--surface-minus-1-contrast);
        border-radius: 100%;
        box-shadow: var(--shadow-high);
        transform: translate(-50%, -50%);
    }
}
