:root {
    --surface-minus-2: #18181a;
    --surface-minus-1: #232326;
    --surface-0: #39393e;
    --surface-plus-1: #5c5c66;
    --surface-plus-2: #7c7c87;

    --surface-minus-2-contrast: #fff;
    --surface-minus-1-contrast: #fff;
    --surface-0-contrast: #fff;
    --surface-plus-1-contrast: #fff;
    --surface-plus-2-contrast: #000;

    --accent-primary: #799bbb;
    --accent-error-danger: #cc3b40;
    --accent-warning: #f8a34e;
    --accent-success: #3bb273;
    --accent-light: #fcd34d;
    --accent-resource: #10b981;
    --accent-asset: #a156d6;
    --accent-code: #ea7c45;
    --accent-x: #ee3752;
    --accent-y: #6f9b1f;
    --accent-z: #2f84e3;

    --accent-primary-contrast: #fff;
    --accent-error-danger-contrast: #fff;
    --accent-warning-contrast: #000;
    --accent-success-contrast: #000;
    --accent-light-contrast: #000;
    --accent-resource-contrast: #000;
    --accent-asset-contrast: #fff;
    --accent-code-contrast: #fff;
    --accent-x-contrast: #000b;
    --accent-y-contrast: #000b;
    --accent-z-contrast: #000b;

    --accent: var(--surface-plus-1);
    --contrast: var(--surface-plus-1-contrast);
    --text: var(--surface-plus-1-contrast);

    --control-radius: 0.3rem;
    --control-height: 2rem;
    --control-padding-x: 0.5rem;
    --control-gap: 0.5rem;
    --control-indent: 1rem;

    --shadow-low: 0 1px 0 rgba(0, 0, 0, 0.2);
    --shadow-medium: 0 2px 2px rgba(0, 0, 0, 0.2);
    --shadow-high: 0 4px 4px rgba(0, 0, 0, 0.2);

    font-size: 12px;
    color-scheme: dark;
}

* {
    box-sizing: border-box;
    min-width: 0; /* Makes flexbox more predictable */
    font-family: system-ui;
}

body {
    margin: 0;
    background: var(--surface-0);
    color: var(--surface-0-contrast);
}

main {
    display: flex;
    flex-direction: column;
    height: 100vh;
    padding: var(--control-gap);
}

textarea,
input[type="text"],
input[type="number"] {
    font: inherit;
    background: inherit;
    color: inherit;
    border: none;
    resize: none;
}

.context\:primary {
    --accent: var(--accent-primary);
    --contrast: var(--accent-primary-contrast);
}

.context\:error-danger {
    --accent: var(--accent-error-danger);
    --contrast: var(--accent-error-danger-contrast);
}

.context\:warning {
    --accent: var(--accent-warning);
    --contrast: var(--accent-warning-contrast);
}

.context\:success {
    --accent: var(--accent-success);
    --contrast: var(--accent-success-contrast);
}

.context\:light {
    --accent: var(--accent-light);
    --contrast: var(--accent-light-contrast);
}

.context\:resource {
    --accent: var(--accent-resource);
    --contrast: var(--accent-resource-contrast);
}

.context\:asset {
    --accent: var(--accent-asset);
    --contrast: var(--accent-asset-contrast);
}

.context\:code {
    --accent: var(--accent-code);
    --contrast: var(--accent-code-contrast);
}

.context\:none {
    --accent: var(--surface-plus-1);
    --contrast: var(--surface-plus-1-contrast);
}

.Button {
    display: flex;
    /* flex-grow: 1; */
    /* flex-basis: 0; */
    align-items: center;
    justify-content: center;
    gap: var(--control-gap);
    appearance: none;
    font-size: inherit;
    border-radius: var(--control-radius);
    border: none;
    height: var(--control-height);
    padding-left: var(--control-padding-x);
    padding-right: var(--control-padding-x);
    box-shadow: var(--shadow-low);
    text-shadow: var(--shadow-low);
    background-color: var(--accent);
    color: var(--contrast);

    /* special case buttons without context to be a bit darker */
    &:not([class*="context:"]) {
        background-color: var(--surface-0);
        color: var(--surface-0-contrast);
    }

    &:not(:disabled):hover {
        filter: brightness(1.1);
    }

    &:not(:disabled):active {
        filter: brightness(1.3);
    }

    &:disabled {
        background-color: color-mix(in srgb, var(--accent) 10%, transparent);
        color: color-mix(in srgb, var(--accent) 60%, transparent);
    }

    &:focus {
        outline: 2px solid color-mix(in srgb, var(--accent) 80%, transparent);
        outline-offset: 1px;
    }
}

.VStack {
    display: flex;
    flex-direction: column;
    gap: var(--control-gap);
    align-items: stretch;

    &.grow {
        flex-grow: 1;
    }
}

.HStack {
    display: flex;
    flex-direction: row;
    gap: var(--control-gap);
    align-items: stretch;

    &.grow {
        flex-grow: 1;
    }
}

.Status {
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text);
    height: var(--control-height);
    gap: var(--control-gap);

    &::before {
        content: "‚óè";
        color: var(--accent);
    }
}

.TreeNode {
    .Chevron {
        appearance: none;
        background: transparent;
        border: none;
        color: inherit;
        position: absolute;
        left: 0;
        top: 50%;
        transform: translateY(-50%);
    }
    .Heading {
        display: flex;
        align-items: center;
        gap: var(--control-gap);
        justify-content: start;
        position: relative;
        height: var(--control-height);
        padding-left: calc(var(--control-indent) * 2);
        padding-right: var(--control-padding-x);

        &.state\:selected {
            background-color: color-mix(
                in srgb,
                var(--accent) 75%,
                transparent
            );
            outline: 1px solid var(--accent);
            color: var(--accent-contrast);
            text-shadow: var(--shadow-low);

            .EntityIcon,
            .Chevron {
                color: var(--accent-contrast);
                filter: drop-shadow(var(--shadow-low));
            }
        }
    }
    .Content {
        margin-left: var(--control-indent);
        border-left: 1px solid var(--surface-plus-1);
        transform-origin: top left;
    }
    .Content[data-state="open"] {
        animation: tree-slide-down 300ms cubic-bezier(0.87, 0, 0.13, 1);
    }
    .Content[data-state="closed"] {
        animation: tree-slide-up 300ms cubic-bezier(0.87, 0, 0.13, 1);
    }
}

@keyframes tree-slide-down {
    from {
        height: 0;
        opacity: 0;
        overflow: hidden;
    }
    to {
        height: var(--radix-collapsible-content-height);
    }
}

@keyframes tree-slide-up {
    from {
        height: var(--radix-collapsible-content-height);
    }
    to {
        overflow: hidden;
        opacity: 0;
        height: 0;
    }
}

@keyframes spin {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}

.EntityIcon,
.ComponentIcon {
    color: var(--accent);
    flex-shrink: 0;
}

svg.lucide {
    width: 1rem;
    height: 1rem;
    display: inline-flex;
}

.EntityTree {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    flex-basis: 0;
    overflow: auto;
}

.Panel {
    background-color: var(--surface-minus-1);
    color: var(--surface-minus-1-contrast);
    border-radius: var(--control-radius);
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    flex-basis: 0;
    overflow: auto;
    gap: var(--control-gap);
}

.Toolbar {
    background-color: var(--surface-minus-1);
    color: var(--surface-minus-1-contrast);
    border-radius: var(--control-radius);
    display: flex;
    flex-direction: row;
    height: calc(var(--control-height) * 2);
    padding-left: var(--control-indent);
    padding-right: var(--control-indent);
    align-items: center;
    justify-content: start;
    gap: var(--control-gap);
}

.Inspector {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    flex-basis: 0;
    overflow: auto;
}

.ComponentInspector {
    display: flex;
    flex-direction: column;
    border-bottom: 1px solid var(--surface-0);

    .Heading {
        font-size: 0.8rem;
        text-shadow: var(--shadow-low);
        display: flex;
        align-items: center;
        height: var(--control-height);
        padding-left: var(--control-padding-x);
        padding-right: var(--control-padding-x);
        gap: var(--control-gap);

        .EntityIcon,
        .Chevron {
            will-change: transform; /* fix for some flickering with the filter */
            filter: drop-shadow(var(--shadow-low));
        }
    }

    .Content {
        border-top: 1px solid var(--surface-minus-1);
        border-bottom: 1px solid var(--surface-minus-1);
        display: flex;
        flex-direction: column;
        gap: var(--control-gap);
        padding: var(--control-padding-x);
    }
}

.ComponentEditor {
    textarea {
        background-color: var(--surface-minus-2);
        font-family: monospace;
        padding-left: var(--control-padding-x);
        padding-right: var(--control-padding-x);
        border-radius: var(--control-radius);
        height: calc(var(--control-height) * 4);
    }

    label {
        font-size: 0.8rem;
        display: flex;
        color: var(--accent);
        height: var(--control-height);
        align-items: center;
        padding-right: var(--control-padding-x);
    }
}

.TextInput {
    display: flex;
    height: var(--control-height);
    background-color: var(--surface-minus-2);
    padding-left: var(--control-padding-x);
    padding-right: var(--control-padding-x);
    border-radius: var(--control-radius);
    gap: var(--control-gap);

    label {
        display: flex;
        font-size: 0.8rem;
        color: var(--accent);
        align-items: center;
        padding-left: var(--control-padding-x);
        flex-grow: 0;
        flex-basis: content;
        max-width: 50%;
    }

    input {
        display: flex;
        text-align: end;
        flex-grow: 1;
        padding: 0;

        &:focus {
            outline: none;
        }
    }
}

.Trackball {
    display: flex;
    flex-grow: 0;
    flex-shrink: 0;
    height: calc(var(--control-height) * 4 + var(--control-gap) * 3);
    width: calc(var(--control-height) * 4 + var(--control-gap) * 3);
    border-radius: 100%;

    .Ring {
        display: flex;
        background: var(--surface-minus-2);
        padding: calc(var(--control-gap) * 1.5);
        border-radius: 100%;
        width: 100%;
        height: 100%;
        transition: border 0.2s ease-in-out;
        cursor:
            url("../cursors/rotate.svg") 12 12,
            auto;
        box-shadow: var(--shadow-high) inset;

        &:focus {
            outline: 2px solid
                color-mix(in srgb, var(--accent) 80%, transparent);
        }
    }

    .Ball {
        overflow: hidden;
        display: flex;
        border-radius: 100%;
        width: 100%;
        border: 1px solid var(--surface-minus-2);
        height: 100%;
        background: radial-gradient(
                circle at center center,
                transparent,
                transparent,
                transparent,
                var(--surface-plus-2)
            ),
            radial-gradient(
                circle at center 30%,
                var(--surface-0),
                var(--surface-minus-1),
                var(--surface-minus-2),
                var(--surface-minus-2),
                var(--surface-0)
            );
        transition: filter 0.5s ease-in-out;
        cursor:
            url("../cursors/rotate-3d.svg") 12 12,
            auto;

        box-shadow: var(--shadow-medium);

        &:focus {
            outline: 2px solid
                color-mix(in srgb, var(--accent) 80%, transparent);
        }
    }

    .Gymbal {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        height: 100%;

        .Axis {
            display: flex;
            align-items: center;
            justify-content: center;
            position: absolute;
            width: 20%;
            height: 20%;
            border-radius: 100%;
        }

        .X {
            background-color: var(--accent-x);
            color: var(--accent-x-contrast);
        }

        .Y {
            background-color: var(--accent-y);
            color: var(--accent-x-contrast);
        }

        .Z {
            background-color: var(--accent-z);
            color: var(--accent-x-contrast);
        }

        .MinusX {
            background: color-mix(in srgb, var(--accent-x) 50%, transparent);
            border: 2px solid var(--accent-x);
            color: transparent;
            &:hover {
                color: inherit;
            }
        }

        .MinusY {
            background: color-mix(in srgb, var(--accent-y) 50%, transparent);
            border: 2px solid var(--accent-y);
            color: transparent;
            &:hover {
                color: inherit;
            }
        }

        .MinusZ {
            background: color-mix(in srgb, var(--accent-z) 50%, transparent);
            border: 2px solid var(--accent-z);
            color: transparent;
            &:hover {
                color: inherit;
            }
        }
    }
}

/**
 * Adapted from ShadCN UI: https://ui.shadcn.com/docs/components/select
 * (MIT License)
 */

.SelectTrigger {
    /* Flexbox utilities */
    display: flex;
    height: 2.25rem; /* h-9 */
    width: 100%; /* w-full */
    align-items: center; /* items-center */
    justify-content: space-between; /* justify-between */
    white-space: nowrap; /* whitespace-nowrap */

    /* Borders and background */
    border-radius: 0.375rem; /* rounded-md */
    border: 1px solid; /* border */
    border-color: var(--border-input); /* border-input */
    background-color: transparent; /* bg-transparent */

    /* Spacing and size */
    padding-left: 0.75rem; /* px-3 */
    padding-right: 0.75rem; /* px-3 */
    padding-top: 0.5rem; /* py-2 */
    padding-bottom: 0.5rem; /* py-2 */

    /* Typography */
    font-size: 0.875rem; /* text-sm */

    /* Effects */
    box-shadow: var(--shadow-sm); /* shadow-sm */
    --tw-ring-offset-color: var(
        --ring-offset-background
    ); /* ring-offset-background */
    --tw-placeholder-opacity: 1;
    color: rgba(
        156,
        163,
        175,
        var(--tw-placeholder-opacity)
    ); /* placeholder:text-muted-foreground */

    /* Focus states */
    outline: 2px solid transparent;
    outline-offset: 2px;
    &:focus {
        outline: none;
        box-shadow:
            var(--ring-offset-background),
            0 0 #0000,
            0 0 #0000,
            var(--ring-1) inset,
            0 0 0 var(--ring-ring) inset;
    }

    /* Disabled states */
    &:disabled {
        cursor: not-allowed; /* disabled:cursor-not-allowed */
        opacity: 0.5; /* disabled:opacity-50 */
    }

    /* Direct child span */
    & > span {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        overflow: hidden;
        -webkit-line-clamp: 1; /* [&>span]:line-clamp-1 */
    }
}

.ScrollButton {
    display: flex;
    cursor: default;
    align-items: center;
    justify-content: center;
    padding-top: 0.25rem;
    padding-bottom: 0.25rem;
}

.SelectContent {
    /* Positioning and Z-index */
    position: relative;
    z-index: 50;

    /* Sizing */
    max-height: 24rem; /* max-h-96 */
    min-width: 8rem; /* min-w-[8rem] */

    /* Overflow, Borders, and Background */
    overflow: hidden;
    border-radius: 0.375rem; /* rounded-md */
    border: 1px solid; /* Adjust the color as needed */
    background-color: var(--bg-popover); /* bg-popover */

    /* Text Color */
    color: var(--text-popover-foreground); /* text-popover-foreground */

    /* Shadow */
    box-shadow: var(--shadow-md); /* shadow-md */

    /* Data attribute based states for animations and transitions */
    &[data-state="open"] {
        animation:
            fadeIn 0.3s ease-in-out,
            zoomIn 0.3s ease-in-out; /* animate-in, fade-in-0, zoom-in-95 */
    }

    &[data-state="closed"] {
        animation:
            fadeOut 0.3s ease-in-out,
            zoomOut 0.3s ease-in-out; /* animate-out, fade-out-0, zoom-out-95 */
    }

    &[data-side="bottom"] {
        animation: slideInFromTop 0.3s ease-in-out; /* slide-in-from-top-2 */
    }

    &[data-side="left"] {
        animation: slideInFromRight 0.3s ease-in-out; /* slide-in-from-right-2 */
    }

    &[data-side="right"] {
        animation: slideInFromLeft 0.3s ease-in-out; /* slide-in-from-left-2 */
    }

    &[data-side="top"] {
        animation: slideInFromBottom 0.3s ease-in-out; /* slide-in-from-bottom-2 */
    }

    &.position\:popper {
        /* Conditional translations based on data-side attribute */
        &[data-side="bottom"] {
            transform: translateY(
                0.25rem
            ); /* translate-y-1 (assuming 1 unit is 0.25rem) */
        }

        &[data-side="left"] {
            transform: translateX(
                -0.25rem
            ); /* -translate-x-1 (assuming 1 unit is 0.25rem) */
        }

        &[data-side="right"] {
            transform: translateX(
                0.25rem
            ); /* translate-x-1 (assuming 1 unit is 0.25rem) */
        }

        &[data-side="top"] {
            transform: translateY(
                -0.25rem
            ); /* -translate-y-1 (assuming 1 unit is 0.25rem) */
        }
    }
}

.SelectViewport {
    padding: 0.25rem;

    &.position\:popper {
        /* Height and Width */
        height: var(
            --radix-select-trigger-height
        ); /* h-[var(--radix-select-trigger-height)] */
        width: 100%; /* w-full */

        /* Minimum Width */
        min-width: var(
            --radix-select-trigger-width
        ); /* min-w-[var(--radix-select-trigger-width)] */
    }
}

.SelectLabel {
    /* Padding */
    padding-left: 0.5rem; /* px-2 (assuming 1 unit is 0.25rem) */
    padding-right: 0.5rem; /* px-2 */
    padding-top: 0.375rem; /* py-1.5 (assuming 1 unit is 0.25rem and 1.5 units is 0.375rem) */
    padding-bottom: 0.375rem; /* py-1.5 */

    /* Typography */
    font-size: 0.875rem; /* text-sm (assuming 1rem is the base size and sm corresponds to 0.875rem) */
    font-weight: 600; /* font-semibold (typically corresponds to a font-weight of 600) */
}

.SelectItem {
    /* Positioning and Layout */
    position: relative;
    display: flex;
    width: 100%;
    cursor: default;
    user-select: none; /* select-none */
    align-items: center;

    /* Borders and Background */
    border-radius: 0.125rem; /* rounded-sm */

    /* Padding and Typography */
    padding-top: 0.375rem; /* py-1.5 (assuming 1 unit is 0.25rem and 1.5 units is 0.375rem) */
    padding-bottom: 0.375rem; /* py-1.5 */
    padding-left: 0.5rem; /* pl-2 */
    padding-right: 2rem; /* pr-8 */
    font-size: 0.875rem; /* text-sm */
    outline: none;

    /* Focus states */
    &:focus {
        background-color: var(--bg-accent); /* focus:bg-accent */
        color: var(--text-accent-foreground); /* focus:text-accent-foreground */
    }

    /* Data attribute based states for disabled */
    &[data-disabled] {
        pointer-events: none; /* data-[disabled]:pointer-events-none */
        opacity: 0.5; /* data-[disabled]:opacity-50 */
    }
}

.SelectItemIndicator {
    /* Positioning */
    position: absolute;
    right: 0.5rem; /* right-2 (assuming 1 unit is 0.25rem) */

    /* Flexbox Layout */
    display: flex;
    align-items: center;
    justify-content: center;

    /* Sizing */
    height: 0.875rem; /* h-3.5 (assuming 1 unit is 0.25rem and 3.5 units is 0.875rem) */
    width: 0.875rem; /* w-3.5 */
}

.SelectItemIndicatorCheck {
    /* Sizing */
    height: 1rem; /* h-4 (assuming 1 unit is 0.25rem) */
    width: 1rem; /* w-4 */
}

.SelectSeparator {
    /* Margins */
    margin-left: -0.25rem; /* -mx-1 (assuming 1 unit is 0.25rem) */
    margin-right: -0.25rem; /* -mx-1 */
    margin-top: 0.25rem; /* my-1 */
    margin-bottom: 0.25rem; /* my-1 */

    /* Sizing */
    height: 1px; /* h-px */

    /* Background Color */
    background-color: var(--bg-muted); /* bg-muted */
}

/* Animation keyframes */
@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

@keyframes fadeOut {
    from {
        opacity: 1;
    }
    to {
        opacity: 0;
    }
}

@keyframes zoomIn {
    from {
        transform: scale(0.95);
    }
    to {
        transform: scale(1);
    }
}

@keyframes zoomOut {
    from {
        transform: scale(1);
    }
    to {
        transform: scale(0.95);
    }
}

@keyframes slideInFromTop {
    from {
        transform: translateY(-2rem);
    }
    to {
        transform: translateY(0);
    }
}

@keyframes slideInFromRight {
    from {
        transform: translateX(2rem);
    }
    to {
        transform: translateX(0);
    }
}

@keyframes slideInFromLeft {
    from {
        transform: translateX(-2rem);
    }
    to {
        transform: translateX(0);
    }
}

@keyframes slideInFromBottom {
    from {
        transform: translateY(2rem);
    }
    to {
        transform: translateY(0);
    }
}
